// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract AdvancedNFT is ERC721, Ownable {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIdCounter;

    mapping(uint256 => uint256) private _tokenPrices;

    event TokenMinted(address indexed owner, uint256 indexed tokenId, uint256 price);
    event TokenTransferred(address indexed from, address indexed to, uint256 indexed tokenId);
    event TokenListed(uint256 indexed tokenId, uint256 price);
    event TokenDelisted(uint256 indexed tokenId);
    event TokenSold(address indexed seller, address indexed buyer, uint256 indexed tokenId, uint256 price);

    constructor() ERC721("AdvancedNFT", "ANFT") {}

    function mint(address to, uint256 price) public onlyOwner returns (uint256) {
        uint256 newTokenId = _tokenIdCounter.current();
        _safeMint(to, newTokenId);
        _tokenIdCounter.increment();
        _tokenPrices[newTokenId] = price;
        emit TokenMinted(to, newTokenId, price);
        return newTokenId;
    }

    function transfer(address from, address to, uint256 tokenId) public {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _transfer(from, to, tokenId);
        emit TokenTransferred(from, to, tokenId);
    }

    function list(uint256 tokenId, uint256 price) public {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not owner nor approved");
        _tokenPrices[tokenId] = price;
        emit TokenListed(tokenId, price);
    }

    function delist(uint256 tokenId) public {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not owner nor approved");
        delete _tokenPrices[tokenId];
        emit TokenDelisted(tokenId);
    }

    function buy(uint256 tokenId) public payable {
        uint256 price = _tokenPrices[tokenId];
        require(price > 0, "Token is not for sale");
        require(msg.value >= price, "Insufficient funds");
        address seller = ownerOf(tokenId);
        transfer(seller, msg.sender, tokenId);
        payable(seller).transfer(price);
        emit TokenSold(seller, msg.sender, tokenId, price);
    }

    function tokenPrice(uint256 tokenId) public view returns (uint256) {
        return _tokenPrices[tokenId];
    }
}
